[global_tags]
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"

  flush_interval = "10s"
  flush_jitter = "0s"

  precision = "0s"

  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0h"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"
  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  urls = ["http://{{ influx_ip_address }}:8086"]
  token = "{{ influx_token  }}"
  organization = "{{ influx_org_name }}"
  bucket = "{{  influx_bucket_name }}"


###############################################################################
#                            PROCESSOR PLUGINS                                   #
###############################################################################


{% if process_geoip %}
[[processors.execd]]
  command = ["/usr/bin/geoip", "--config", "/etc/geoip/geoip.conf"]
{% endif %}

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

{% if monitor_systemd %}
[[inputs.systemd_units]]

{% endif %}

{% if monitor_temperature %}
[[inputs.temp]]

{% endif %}

{% if monitor_docker %}
[[inputs.docker]]
[[inputs.docker_log]]

{% endif %}


{% if monitor_ufw  %}
[[inputs.tail]]
    files = ["/var/log/ufw.log"]
    from_beginning = true
    name_override = "ufw_log"
    watch_method = "poll"
    grok_patterns = ["%{CUSTOM_LOG_FORMAT}"]
    grok_custom_patterns = '''
         CUSTOM_LOG_FORMAT %{SYSLOGTIMESTAMP:ufw_timestamp:ts-syslog} %{SYSLOGHOST:ufw_hostname} %{DATA:ufw_program}: \[%{DATA}\] \[UFW %{WORD:ufw_action}\] IN=%{DATA:ufw_interface} OUT=%{DATA:ufw_interface_out}( (MAC|PHYSIN)=%{DATA:ufw_mac})?SRC=%{IP:ufw_src_ip} DST=%{IP:ufw_dest_ip}( LEN=%{NUMBER:ufw_packet_len})? %{GREEDYDATA:ufw_tcp_opts} PROTO=%{WORD:ufw_protocol}( SPT=%{NUMBER:ufw_source_port})?( DPT=%{NUMBER:ufw_dest_port})?%{GREEDYDATA:ufw_tcp_opts}
    '''
    data_format = "grok"
    grok_timezone = "UTC"
    grok_custom_pattern_files = []

{% endif %}


{% if monitor_system  %}
# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false
  ## If true and the info is available then add core_id and physical_id tags
  core_tags = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

  ## Ignore mount points by mount options.
  ## The 'mount' command reports options of all mounts in parathesis.
  ## Bind mounts can be ignored with the special 'bind' option.
  # ignore_mount_opts = []


# Read metrics about disk IO by device
# This plugin ONLY supports Linux
[[inputs.diskio]]

# Get kernel statistics from /proc/stat
# This plugin ONLY supports Linux
[[inputs.kernel]]

[[inputs.mem]]

# Get the number of processes and group them by status
# This plugin ONLY supports non-Windows
[[inputs.processes]]
  ## Use sudo to run ps command on *BSD systems. Linux systems will read
  ## /proc, so this does not apply there.
  use_sudo = false


[[inputs.swap]]

[[inputs.system]]

{% endif %}


{% if monitor_zfs %}

[[inputs.zfs]]
poolMetrics = true
datasetMetrics = true

{% endif %}


{% if monitor_internet_speed %}

[[inputs.internet_speed]]
	interval = "48h"

{% endif %}


{% if monitor_network %}
[[inputs.net]]
{% endif %}



{% if monitor_sanoid_snapshots %}
[[inputs.exec]]
  commands = ["sudo /usr/sbin/sanoid  --monitor-snapshots"]
  interval = "4h"
  data_format = "nagios"
  name_suffix = "_snapshot_health"
{% endif %}


{% if monitor_sanoid_health %}
[[inputs.exec]]
  collection_jitter = "2m"
  commands = ["sudo /usr/sbin/sanoid  --monitor-health"]
  interval = "4h"
  data_format = "nagios"
  name_suffix = "_snapshot_health"
{% endif %}
